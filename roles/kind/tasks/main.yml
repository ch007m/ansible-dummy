- name: Set the github url to use the tag passed as parameter
  set_fact:
    github_url: "{{ github_api }}/{{ github_owner }}/{{ github_repo }}/releases/tags/{{ kind_version }}"
  when: kind_version != ""

- name: Set the github url to use the latest release
  set_fact:
    github_url: "{{ github_api }}/{{ github_owner }}/{{ github_repo }}/releases/latest"
  when: kind_version == ""

- name: Set force to yes when kind must be re-installed
  set_fact:
    force: yes
  when: kind_force_client_install | bool == true

- name: Check if 'kind' binary exists
  stat:
    path: "{{ target_path}}/{{ kind_executable_name }}"
  register: kind_binary_present

- block:
    - debug: msg="Accessing the release ':' {{ github_url }}"
    - name: Call github to get the asset information used next to download the binary
      uri:
        url: "{{ github_url }}"
        return_content: yes
      register: github_response

- name: Download 'kind' binary from github & install it if missing from /usr/local/bin directory
  get_url:
    url: https://api.github.com/repos/{{ github_owner }}/{{ github_repo }}/releases/assets/{{ id }}
    headers:
      Accept: application/octet-stream
    dest: "{{ target_path }}/{{ kind_executable_name }}"
    mode: "{{ asset_mode }}"
    force: "{{ force }}"
  when: kind_force_client_install | bool == true or not kind_binary_present.stat.exists
  vars:
    release_data: "{{ github_response.json|to_json }}"
    arch: "{{ ansible_system|lower }}-{{ arch_map[ansible_userspace_architecture] }}"
    id: "{{ release_data|from_json|json_query('assets[?ends_with(@.name, `' ~ arch ~ '`)] | [0].id') }}"